#include <iostream>
#include <conio.h>
#include <windows.h>
#include <dos.h>
#include <ctime>
#include <stdio.h>
#include <stdlib.h>
#include <chrono>

HANDLE console = GetStdHandle(STD_OUTPUT_HANDLE);
COORD CursorPosition;
CONSOLE_CURSOR_INFO     cursorInfo;
CONSOLE_SCREEN_BUFFER_INFO consolle;

using namespace std;

class Object
{
public:
	float x, y;
	char sym;

	virtual void Draw() = 0;
	virtual void Clear() = 0;

	void gotoxy(int x, int y)
	{
		CursorPosition.X = x;
		CursorPosition.Y = y;
		SetConsoleCursorPosition(console, CursorPosition);

		GetConsoleCursorInfo(console, &cursorInfo);
		cursorInfo.bVisible = false; // set the cursor visibility
		SetConsoleCursorInfo(console, &cursorInfo);
	}
};

class Dynamic : public Object
{
public:
	float speed;
	float time;

	virtual void MoveCalculation() = 0;
};

class Star : public Dynamic
{
public:

	Star()
	{
		sym = '.';
		int randomNumber = rand() % 28 + 1;
		GetConsoleScreenBufferInfo(console, &consolle);
		x = consolle.dwSize.X - 1;
		y = randomNumber;
		speed = randomNumber * 0.002;
		time = 100 * speed;
	}

	void Draw()
	{
		gotoxy(x, y);
		cout << sym;
		MoveCalculation();
	}

	void Clear()
	{
		gotoxy(x, y);
		cout << ' ';
	}

	void MoveCalculation()
	{
		if (time < 0)
		{
			Clear();
			x -= 1;
			time = 100 * speed;
			if (x == 0)
			{
				x = consolle.dwSize.X - 1;
				speed = (rand() % 22 + 1) * 0.002;
			}
		}
		else
		{
			time -= 0.1;
		}
	}
};

class StarsBackGround
{
public:
	Star stars[23];

	StarsBackGround()
	{
		for (int i = 0; i < 23; i++)
		{
			stars[i] = Star();
		}
	}

	void DrawStars()
	{
		for (int i = 0; i < 10; i++)
		{
			stars[i].Draw();
		}
	}
};

class EnemyBasicRanger : public Dynamic
{	
	public:

		int direction = 1;
		EnemyBasicRanger()
		{
			sym = '*';
			int randomNumber = rand() % 28 + 1;
			GetConsoleScreenBufferInfo(console, &consolle);
			x = consolle.dwSize.X - 1;
			y =  randomNumber;
			speed = 1;
			time = 5 * speed;
		}

		void Draw()
		{
			gotoxy(x, y);
			cout << sym;
			MoveCalculation();
		}

		void Clear()
		{
			gotoxy(x, y);
			cout << ' ';
		}

		void MoveCalculation()
		{
			if (time < 0)
			{
				Clear();
				y += direction;
				time = 5 * speed;
				if (y == 0 || y == 29)
					direction *= -1;
			}
			else
			{
				time -= 0.01;
			}
		}
};
int fibonacci(int n)
{
	if (n < 3) return 1;
	return fibonacci(n - 1) + fibonacci(n - 2);
}
int main()
{
	std::chrono::time_point<std::chrono::system_clock> start, end;
	start = std::chrono::system_clock::now();
	int result = fibonacci(42);
	end = std::chrono::system_clock::now();

	int elapsed_seconds = std::chrono::duration_cast<std::chrono::seconds>
		(end - start).count();
	std::time_t end_time = std::chrono::system_clock::to_time_t(end);

	std::cout << "Вычисления закончены в " << ctime(&end_time)
		<< "Время выполнения: " << elapsed_seconds << "s\n";

	srand((unsigned)time(0));
	StarsBackGround stars;

	EnemyBasicRanger enemy;

	while (true)
	{
		//frame start
		enemy.Draw();
		stars.DrawStars();
		// frame finish
	}
}
